// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KRPC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KRPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KRPC {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Argument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Argument_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Services_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Services_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_reflection_ = NULL;
const ::google::protobuf::Descriptor* Procedure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Procedure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Class_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Class_reflection_ = NULL;
const ::google::protobuf::Descriptor* Enumeration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Enumeration_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnumerationValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnumerationValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  List_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictionaryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Set_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KRPC_2eproto() {
  protobuf_AddDesc_KRPC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KRPC.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, procedure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, arguments_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Argument_descriptor_ = file->message_type(1);
  static const int Argument_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, value_),
  };
  Argument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Argument_descriptor_,
      Argument::default_instance_,
      Argument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Argument));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, return_value_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  StreamMessage_descriptor_ = file->message_type(3);
  static const int StreamMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, responses_),
  };
  StreamMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMessage_descriptor_,
      StreamMessage::default_instance_,
      StreamMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMessage));
  StreamResponse_descriptor_ = file->message_type(4);
  static const int StreamResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, response_),
  };
  StreamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamResponse_descriptor_,
      StreamResponse::default_instance_,
      StreamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamResponse));
  Services_descriptor_ = file->message_type(5);
  static const int Services_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Services, services_),
  };
  Services_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Services_descriptor_,
      Services::default_instance_,
      Services_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Services, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Services, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Services));
  Service_descriptor_ = file->message_type(6);
  static const int Service_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, procedures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, enumerations_),
  };
  Service_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Service_descriptor_,
      Service::default_instance_,
      Service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Service));
  Procedure_descriptor_ = file->message_type(7);
  static const int Procedure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, return_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, attributes_),
  };
  Procedure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Procedure_descriptor_,
      Procedure::default_instance_,
      Procedure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Procedure));
  Parameter_descriptor_ = file->message_type(8);
  static const int Parameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, default_argument_),
  };
  Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameter));
  Class_descriptor_ = file->message_type(9);
  static const int Class_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, name_),
  };
  Class_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Class_descriptor_,
      Class::default_instance_,
      Class_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Class));
  Enumeration_descriptor_ = file->message_type(10);
  static const int Enumeration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, values_),
  };
  Enumeration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Enumeration_descriptor_,
      Enumeration::default_instance_,
      Enumeration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Enumeration));
  EnumerationValue_descriptor_ = file->message_type(11);
  static const int EnumerationValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, value_),
  };
  EnumerationValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnumerationValue_descriptor_,
      EnumerationValue::default_instance_,
      EnumerationValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnumerationValue));
  List_descriptor_ = file->message_type(12);
  static const int List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, items_),
  };
  List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      List_descriptor_,
      List::default_instance_,
      List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(List));
  Dictionary_descriptor_ = file->message_type(13);
  static const int Dictionary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, entries_),
  };
  Dictionary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dictionary_descriptor_,
      Dictionary::default_instance_,
      Dictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dictionary));
  DictionaryEntry_descriptor_ = file->message_type(14);
  static const int DictionaryEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, value_),
  };
  DictionaryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DictionaryEntry_descriptor_,
      DictionaryEntry::default_instance_,
      DictionaryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DictionaryEntry));
  Set_descriptor_ = file->message_type(15);
  static const int Set_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, items_),
  };
  Set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Set_descriptor_,
      Set::default_instance_,
      Set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Set));
  Tuple_descriptor_ = file->message_type(16);
  static const int Tuple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, items_),
  };
  Tuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tuple_descriptor_,
      Tuple::default_instance_,
      Tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tuple));
  Status_descriptor_ = file->message_type(17);
  static const int Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, version_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KRPC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Argument_descriptor_, &Argument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMessage_descriptor_, &StreamMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamResponse_descriptor_, &StreamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Services_descriptor_, &Services::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Service_descriptor_, &Service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Procedure_descriptor_, &Procedure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Class_descriptor_, &Class::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Enumeration_descriptor_, &Enumeration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnumerationValue_descriptor_, &EnumerationValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    List_descriptor_, &List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dictionary_descriptor_, &Dictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DictionaryEntry_descriptor_, &DictionaryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Set_descriptor_, &Set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tuple_descriptor_, &Tuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KRPC_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Argument::default_instance_;
  delete Argument_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete StreamMessage::default_instance_;
  delete StreamMessage_reflection_;
  delete StreamResponse::default_instance_;
  delete StreamResponse_reflection_;
  delete Services::default_instance_;
  delete Services_reflection_;
  delete Service::default_instance_;
  delete Service_reflection_;
  delete Procedure::default_instance_;
  delete Procedure_reflection_;
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete Class::default_instance_;
  delete Class_reflection_;
  delete Enumeration::default_instance_;
  delete Enumeration_reflection_;
  delete EnumerationValue::default_instance_;
  delete EnumerationValue_reflection_;
  delete List::default_instance_;
  delete List_reflection_;
  delete Dictionary::default_instance_;
  delete Dictionary_reflection_;
  delete DictionaryEntry::default_instance_;
  delete DictionaryEntry_reflection_;
  delete Set::default_instance_;
  delete Set_reflection_;
  delete Tuple::default_instance_;
  delete Tuple_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
}

void protobuf_AddDesc_KRPC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nKRPC.proto\022\004KRPC\"P\n\007Request\022\017\n\007service"
    "\030\001 \002(\t\022\021\n\tprocedure\030\002 \002(\t\022!\n\targuments\030\003"
    " \003(\0132\016.KRPC.Argument\"+\n\010Argument\022\020\n\010posi"
    "tion\030\001 \002(\r\022\r\n\005value\030\002 \002(\014\"=\n\010Response\022\014\n"
    "\004time\030\001 \002(\001\022\r\n\005error\030\002 \001(\t\022\024\n\014return_val"
    "ue\030\003 \001(\014\"8\n\rStreamMessage\022\'\n\tresponses\030\001"
    " \003(\0132\024.KRPC.StreamResponse\">\n\016StreamResp"
    "onse\022\n\n\002id\030\001 \002(\r\022 \n\010response\030\002 \002(\0132\016.KRP"
    "C.Response\"+\n\010Services\022\037\n\010services\030\001 \003(\013"
    "2\r.KRPC.Service\"\203\001\n\007Service\022\014\n\004name\030\001 \002("
    "\t\022#\n\nprocedures\030\002 \003(\0132\017.KRPC.Procedure\022\034"
    "\n\007classes\030\003 \003(\0132\013.KRPC.Class\022\'\n\014enumerat"
    "ions\030\004 \003(\0132\021.KRPC.Enumeration\"g\n\tProcedu"
    "re\022\014\n\004name\030\001 \002(\t\022#\n\nparameters\030\002 \003(\0132\017.K"
    "RPC.Parameter\022\023\n\013return_type\030\003 \001(\t\022\022\n\nat"
    "tributes\030\004 \003(\t\"A\n\tParameter\022\014\n\004name\030\001 \002("
    "\t\022\014\n\004type\030\002 \002(\t\022\030\n\020default_argument\030\003 \001("
    "\014\"\025\n\005Class\022\014\n\004name\030\001 \002(\t\"C\n\013Enumeration\022"
    "\014\n\004name\030\001 \002(\t\022&\n\006values\030\002 \003(\0132\026.KRPC.Enu"
    "merationValue\"/\n\020EnumerationValue\022\014\n\004nam"
    "e\030\001 \002(\t\022\r\n\005value\030\002 \002(\005\"\025\n\004List\022\r\n\005items\030"
    "\001 \003(\014\"4\n\nDictionary\022&\n\007entries\030\001 \003(\0132\025.K"
    "RPC.DictionaryEntry\"-\n\017DictionaryEntry\022\013"
    "\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\"\024\n\003Set\022\r\n\005ite"
    "ms\030\001 \003(\014\"\026\n\005Tuple\022\r\n\005items\030\001 \003(\014\"\031\n\006Stat"
    "us\022\017\n\007version\030\001 \002(\t", 1019);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KRPC.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Argument::default_instance_ = new Argument();
  Response::default_instance_ = new Response();
  StreamMessage::default_instance_ = new StreamMessage();
  StreamResponse::default_instance_ = new StreamResponse();
  Services::default_instance_ = new Services();
  Service::default_instance_ = new Service();
  Procedure::default_instance_ = new Procedure();
  Parameter::default_instance_ = new Parameter();
  Class::default_instance_ = new Class();
  Enumeration::default_instance_ = new Enumeration();
  EnumerationValue::default_instance_ = new EnumerationValue();
  List::default_instance_ = new List();
  Dictionary::default_instance_ = new Dictionary();
  DictionaryEntry::default_instance_ = new DictionaryEntry();
  Set::default_instance_ = new Set();
  Tuple::default_instance_ = new Tuple();
  Status::default_instance_ = new Status();
  Request::default_instance_->InitAsDefaultInstance();
  Argument::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  StreamMessage::default_instance_->InitAsDefaultInstance();
  StreamResponse::default_instance_->InitAsDefaultInstance();
  Services::default_instance_->InitAsDefaultInstance();
  Service::default_instance_->InitAsDefaultInstance();
  Procedure::default_instance_->InitAsDefaultInstance();
  Parameter::default_instance_->InitAsDefaultInstance();
  Class::default_instance_->InitAsDefaultInstance();
  Enumeration::default_instance_->InitAsDefaultInstance();
  EnumerationValue::default_instance_->InitAsDefaultInstance();
  List::default_instance_->InitAsDefaultInstance();
  Dictionary::default_instance_->InitAsDefaultInstance();
  DictionaryEntry::default_instance_->InitAsDefaultInstance();
  Set::default_instance_->InitAsDefaultInstance();
  Tuple::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KRPC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KRPC_2eproto {
  StaticDescriptorInitializer_KRPC_2eproto() {
    protobuf_AddDesc_KRPC_2eproto();
  }
} static_descriptor_initializer_KRPC_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Request::kServiceFieldNumber;
const int Request::kProcedureFieldNumber;
const int Request::kArgumentsFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  procedure_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:KRPC.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_;
  }
  if (procedure_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete procedure_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_->clear();
      }
    }
    if (has_procedure()) {
      if (procedure_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        procedure_->clear();
      }
    }
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_procedure;
        break;
      }

      // required string procedure = 2;
      case 2: {
        if (tag == 18) {
         parse_procedure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procedure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->procedure().data(), this->procedure().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "procedure");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arguments;
        break;
      }

      // repeated .KRPC.Argument arguments = 3;
      case 3: {
        if (tag == 26) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arguments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Request)
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // required string procedure = 2;
  if (has_procedure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->procedure().data(), this->procedure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "procedure");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->procedure(), output);
  }

  // repeated .KRPC.Argument arguments = 3;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arguments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Request)
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // required string procedure = 2;
  if (has_procedure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->procedure().data(), this->procedure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "procedure");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->procedure(), target);
  }

  // repeated .KRPC.Argument arguments = 3;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arguments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }

    // required string procedure = 2;
    if (has_procedure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->procedure());
    }

  }
  // repeated .KRPC.Argument arguments = 3;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_procedure()) {
      set_procedure(from.procedure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->arguments())) return false;
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(procedure_, other->procedure_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Argument::kPositionFieldNumber;
const int Argument::kValueFieldNumber;
#endif  // !_MSC_VER

Argument::Argument()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Argument)
}

void Argument::InitAsDefaultInstance() {
}

Argument::Argument(const Argument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Argument)
}

void Argument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:KRPC.Argument)
  SharedDtor();
}

void Argument::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Argument_descriptor_;
}

const Argument& Argument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Argument* Argument::default_instance_ = NULL;

Argument* Argument::New() const {
  return new Argument;
}

void Argument::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    position_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Argument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Argument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Argument)
  return false;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Argument)
  // required uint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Argument)
}

::google::protobuf::uint8* Argument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Argument)
  // required uint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Argument)
  return target;
}

int Argument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Argument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Argument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Argument::Swap(Argument* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Argument_descriptor_;
  metadata.reflection = Argument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kTimeFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kReturnValueFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:KRPC.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (return_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete return_value_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    time_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_return_value()) {
      if (return_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        return_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_return_value;
        break;
      }

      // optional bytes return_value = 3;
      case 3: {
        if (tag == 26) {
         parse_return_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_return_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Response)
  // required double time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional bytes return_value = 3;
  if (has_return_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->return_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Response)
  // required double time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional bytes return_value = 3;
  if (has_return_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->return_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double time = 1;
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional bytes return_value = 3;
    if (has_return_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->return_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_return_value()) {
      set_return_value(from.return_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(error_, other->error_);
    std::swap(return_value_, other->return_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamMessage::kResponsesFieldNumber;
#endif  // !_MSC_VER

StreamMessage::StreamMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.StreamMessage)
}

void StreamMessage::InitAsDefaultInstance() {
}

StreamMessage::StreamMessage(const StreamMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.StreamMessage)
}

void StreamMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:KRPC.StreamMessage)
  SharedDtor();
}

void StreamMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMessage_descriptor_;
}

const StreamMessage& StreamMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

StreamMessage* StreamMessage::default_instance_ = NULL;

StreamMessage* StreamMessage::New() const {
  return new StreamMessage;
}

void StreamMessage::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.StreamMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KRPC.StreamResponse responses = 1;
      case 1: {
        if (tag == 10) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.StreamMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.StreamMessage)
  return false;
#undef DO_
}

void StreamMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.StreamMessage)
  // repeated .KRPC.StreamResponse responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.StreamMessage)
}

::google::protobuf::uint8* StreamMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.StreamMessage)
  // repeated .KRPC.StreamResponse responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.StreamMessage)
  return target;
}

int StreamMessage::ByteSize() const {
  int total_size = 0;

  // repeated .KRPC.StreamResponse responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamMessage::MergeFrom(const StreamMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessage::CopyFrom(const StreamMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->responses())) return false;
  return true;
}

void StreamMessage::Swap(StreamMessage* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMessage_descriptor_;
  metadata.reflection = StreamMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamResponse::kIdFieldNumber;
const int StreamResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

StreamResponse::StreamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.StreamResponse)
}

void StreamResponse::InitAsDefaultInstance() {
  response_ = const_cast< ::KRPC::Response*>(&::KRPC::Response::default_instance());
}

StreamResponse::StreamResponse(const StreamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.StreamResponse)
}

void StreamResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamResponse::~StreamResponse() {
  // @@protoc_insertion_point(destructor:KRPC.StreamResponse)
  SharedDtor();
}

void StreamResponse::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void StreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamResponse_descriptor_;
}

const StreamResponse& StreamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

StreamResponse* StreamResponse::default_instance_ = NULL;

StreamResponse* StreamResponse::New() const {
  return new StreamResponse;
}

void StreamResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_response()) {
      if (response_ != NULL) response_->::KRPC::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.StreamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // required .KRPC.Response response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.StreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.StreamResponse)
  return false;
#undef DO_
}

void StreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.StreamResponse)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .KRPC.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.StreamResponse)
}

::google::protobuf::uint8* StreamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.StreamResponse)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .KRPC.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.StreamResponse)
  return target;
}

int StreamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .KRPC.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamResponse::MergeFrom(const StreamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_response()) {
      mutable_response()->::KRPC::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamResponse::CopyFrom(const StreamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  return true;
}

void StreamResponse::Swap(StreamResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamResponse_descriptor_;
  metadata.reflection = StreamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Services::kServicesFieldNumber;
#endif  // !_MSC_VER

Services::Services()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Services)
}

void Services::InitAsDefaultInstance() {
}

Services::Services(const Services& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Services)
}

void Services::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Services::~Services() {
  // @@protoc_insertion_point(destructor:KRPC.Services)
  SharedDtor();
}

void Services::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Services::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Services::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Services_descriptor_;
}

const Services& Services::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Services* Services::default_instance_ = NULL;

Services* Services::New() const {
  return new Services;
}

void Services::Clear() {
  services_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Services::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Services)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KRPC.Service services = 1;
      case 1: {
        if (tag == 10) {
         parse_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_services;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Services)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Services)
  return false;
#undef DO_
}

void Services::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Services)
  // repeated .KRPC.Service services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->services(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Services)
}

::google::protobuf::uint8* Services::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Services)
  // repeated .KRPC.Service services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->services(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Services)
  return target;
}

int Services::ByteSize() const {
  int total_size = 0;

  // repeated .KRPC.Service services = 1;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->services(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Services* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Services*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Services::MergeFrom(const Services& from) {
  GOOGLE_CHECK_NE(&from, this);
  services_.MergeFrom(from.services_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Services::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Services::CopyFrom(const Services& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->services())) return false;
  return true;
}

void Services::Swap(Services* other) {
  if (other != this) {
    services_.Swap(&other->services_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Services::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Services_descriptor_;
  metadata.reflection = Services_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Service::kNameFieldNumber;
const int Service::kProceduresFieldNumber;
const int Service::kClassesFieldNumber;
const int Service::kEnumerationsFieldNumber;
#endif  // !_MSC_VER

Service::Service()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Service)
}

void Service::InitAsDefaultInstance() {
}

Service::Service(const Service& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Service)
}

void Service::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:KRPC.Service)
  SharedDtor();
}

void Service::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const Service& Service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New() const {
  return new Service;
}

void Service::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  procedures_.Clear();
  classes_.Clear();
  enumerations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_procedures;
        break;
      }

      // repeated .KRPC.Procedure procedures = 2;
      case 2: {
        if (tag == 18) {
         parse_procedures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_procedures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_procedures;
        if (input->ExpectTag(26)) goto parse_classes;
        break;
      }

      // repeated .KRPC.Class classes = 3;
      case 3: {
        if (tag == 26) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classes;
        if (input->ExpectTag(34)) goto parse_enumerations;
        break;
      }

      // repeated .KRPC.Enumeration enumerations = 4;
      case 4: {
        if (tag == 34) {
         parse_enumerations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enumerations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_enumerations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Service)
  return false;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Service)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .KRPC.Procedure procedures = 2;
  for (int i = 0; i < this->procedures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->procedures(i), output);
  }

  // repeated .KRPC.Class classes = 3;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->classes(i), output);
  }

  // repeated .KRPC.Enumeration enumerations = 4;
  for (int i = 0; i < this->enumerations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enumerations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Service)
}

::google::protobuf::uint8* Service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Service)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .KRPC.Procedure procedures = 2;
  for (int i = 0; i < this->procedures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->procedures(i), target);
  }

  // repeated .KRPC.Class classes = 3;
  for (int i = 0; i < this->classes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->classes(i), target);
  }

  // repeated .KRPC.Enumeration enumerations = 4;
  for (int i = 0; i < this->enumerations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enumerations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Service)
  return target;
}

int Service::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .KRPC.Procedure procedures = 2;
  total_size += 1 * this->procedures_size();
  for (int i = 0; i < this->procedures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->procedures(i));
  }

  // repeated .KRPC.Class classes = 3;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }

  // repeated .KRPC.Enumeration enumerations = 4;
  total_size += 1 * this->enumerations_size();
  for (int i = 0; i < this->enumerations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enumerations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
  GOOGLE_CHECK_NE(&from, this);
  procedures_.MergeFrom(from.procedures_);
  classes_.MergeFrom(from.classes_);
  enumerations_.MergeFrom(from.enumerations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->procedures())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->classes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enumerations())) return false;
  return true;
}

void Service::Swap(Service* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    procedures_.Swap(&other->procedures_);
    classes_.Swap(&other->classes_);
    enumerations_.Swap(&other->enumerations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_descriptor_;
  metadata.reflection = Service_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Procedure::kNameFieldNumber;
const int Procedure::kParametersFieldNumber;
const int Procedure::kReturnTypeFieldNumber;
const int Procedure::kAttributesFieldNumber;
#endif  // !_MSC_VER

Procedure::Procedure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Procedure)
}

void Procedure::InitAsDefaultInstance() {
}

Procedure::Procedure(const Procedure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Procedure)
}

void Procedure::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Procedure::~Procedure() {
  // @@protoc_insertion_point(destructor:KRPC.Procedure)
  SharedDtor();
}

void Procedure::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (return_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete return_type_;
  }
  if (this != default_instance_) {
  }
}

void Procedure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Procedure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Procedure_descriptor_;
}

const Procedure& Procedure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Procedure* Procedure::default_instance_ = NULL;

Procedure* Procedure::New() const {
  return new Procedure;
}

void Procedure::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_return_type()) {
      if (return_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        return_type_->clear();
      }
    }
  }
  parameters_.Clear();
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Procedure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Procedure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameters;
        break;
      }

      // repeated .KRPC.Parameter parameters = 2;
      case 2: {
        if (tag == 18) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameters;
        if (input->ExpectTag(26)) goto parse_return_type;
        break;
      }

      // optional string return_type = 3;
      case 3: {
        if (tag == 26) {
         parse_return_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->return_type().data(), this->return_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "return_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attributes;
        break;
      }

      // repeated string attributes = 4;
      case 4: {
        if (tag == 34) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attributes(this->attributes_size() - 1).data(),
            this->attributes(this->attributes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attributes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attributes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Procedure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Procedure)
  return false;
#undef DO_
}

void Procedure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Procedure)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .KRPC.Parameter parameters = 2;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parameters(i), output);
  }

  // optional string return_type = 3;
  if (has_return_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->return_type().data(), this->return_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "return_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->return_type(), output);
  }

  // repeated string attributes = 4;
  for (int i = 0; i < this->attributes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->attributes(i).data(), this->attributes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "attributes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attributes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Procedure)
}

::google::protobuf::uint8* Procedure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Procedure)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .KRPC.Parameter parameters = 2;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parameters(i), target);
  }

  // optional string return_type = 3;
  if (has_return_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->return_type().data(), this->return_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "return_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->return_type(), target);
  }

  // repeated string attributes = 4;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes(i).data(), this->attributes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attributes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->attributes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Procedure)
  return target;
}

int Procedure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string return_type = 3;
    if (has_return_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->return_type());
    }

  }
  // repeated .KRPC.Parameter parameters = 2;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  // repeated string attributes = 4;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Procedure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Procedure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Procedure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Procedure::MergeFrom(const Procedure& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_return_type()) {
      set_return_type(from.return_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Procedure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Procedure::CopyFrom(const Procedure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Procedure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->parameters())) return false;
  return true;
}

void Procedure::Swap(Procedure* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    parameters_.Swap(&other->parameters_);
    std::swap(return_type_, other->return_type_);
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Procedure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Procedure_descriptor_;
  metadata.reflection = Procedure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parameter::kNameFieldNumber;
const int Parameter::kTypeFieldNumber;
const int Parameter::kDefaultArgumentFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Parameter)
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Parameter)
}

void Parameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_argument_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:KRPC.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (default_argument_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete default_argument_;
  }
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_default_argument()) {
      if (default_argument_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        default_argument_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_default_argument;
        break;
      }

      // optional bytes default_argument = 3;
      case 3: {
        if (tag == 26) {
         parse_default_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_argument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Parameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional bytes default_argument = 3;
  if (has_default_argument()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->default_argument(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Parameter)
}

::google::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Parameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional bytes default_argument = 3;
  if (has_default_argument()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->default_argument(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Parameter)
  return target;
}

int Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bytes default_argument = 3;
    if (has_default_argument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->default_argument());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_default_argument()) {
      set_default_argument(from.default_argument());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(default_argument_, other->default_argument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Class::kNameFieldNumber;
#endif  // !_MSC_VER

Class::Class()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Class)
}

void Class::InitAsDefaultInstance() {
}

Class::Class(const Class& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Class)
}

void Class::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Class::~Class() {
  // @@protoc_insertion_point(destructor:KRPC.Class)
  SharedDtor();
}

void Class::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Class::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Class::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Class_descriptor_;
}

const Class& Class::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Class* Class::default_instance_ = NULL;

Class* Class::New() const {
  return new Class;
}

void Class::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Class::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Class)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Class)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Class)
  return false;
#undef DO_
}

void Class::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Class)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Class)
}

::google::protobuf::uint8* Class::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Class)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Class)
  return target;
}

int Class::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Class::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Class* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Class*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Class::MergeFrom(const Class& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Class::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Class::CopyFrom(const Class& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Class::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Class::Swap(Class* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Class::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Class_descriptor_;
  metadata.reflection = Class_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Enumeration::kNameFieldNumber;
const int Enumeration::kValuesFieldNumber;
#endif  // !_MSC_VER

Enumeration::Enumeration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Enumeration)
}

void Enumeration::InitAsDefaultInstance() {
}

Enumeration::Enumeration(const Enumeration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Enumeration)
}

void Enumeration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Enumeration::~Enumeration() {
  // @@protoc_insertion_point(destructor:KRPC.Enumeration)
  SharedDtor();
}

void Enumeration::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Enumeration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Enumeration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Enumeration_descriptor_;
}

const Enumeration& Enumeration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Enumeration* Enumeration::default_instance_ = NULL;

Enumeration* Enumeration::New() const {
  return new Enumeration;
}

void Enumeration::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Enumeration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Enumeration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .KRPC.EnumerationValue values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Enumeration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Enumeration)
  return false;
#undef DO_
}

void Enumeration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Enumeration)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .KRPC.EnumerationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Enumeration)
}

::google::protobuf::uint8* Enumeration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Enumeration)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .KRPC.EnumerationValue values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Enumeration)
  return target;
}

int Enumeration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .KRPC.EnumerationValue values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Enumeration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Enumeration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Enumeration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Enumeration::MergeFrom(const Enumeration& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Enumeration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enumeration::CopyFrom(const Enumeration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enumeration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void Enumeration::Swap(Enumeration* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Enumeration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Enumeration_descriptor_;
  metadata.reflection = Enumeration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnumerationValue::kNameFieldNumber;
const int EnumerationValue::kValueFieldNumber;
#endif  // !_MSC_VER

EnumerationValue::EnumerationValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.EnumerationValue)
}

void EnumerationValue::InitAsDefaultInstance() {
}

EnumerationValue::EnumerationValue(const EnumerationValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.EnumerationValue)
}

void EnumerationValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnumerationValue::~EnumerationValue() {
  // @@protoc_insertion_point(destructor:KRPC.EnumerationValue)
  SharedDtor();
}

void EnumerationValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void EnumerationValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumerationValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumerationValue_descriptor_;
}

const EnumerationValue& EnumerationValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

EnumerationValue* EnumerationValue::default_instance_ = NULL;

EnumerationValue* EnumerationValue::New() const {
  return new EnumerationValue;
}

void EnumerationValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnumerationValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.EnumerationValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.EnumerationValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.EnumerationValue)
  return false;
#undef DO_
}

void EnumerationValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.EnumerationValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.EnumerationValue)
}

::google::protobuf::uint8* EnumerationValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.EnumerationValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.EnumerationValue)
  return target;
}

int EnumerationValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumerationValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnumerationValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnumerationValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnumerationValue::MergeFrom(const EnumerationValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnumerationValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumerationValue::CopyFrom(const EnumerationValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumerationValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnumerationValue::Swap(EnumerationValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnumerationValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnumerationValue_descriptor_;
  metadata.reflection = EnumerationValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int List::kItemsFieldNumber;
#endif  // !_MSC_VER

List::List()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.List)
}

void List::InitAsDefaultInstance() {
}

List::List(const List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.List)
}

void List::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

List::~List() {
  // @@protoc_insertion_point(destructor:KRPC.List)
  SharedDtor();
}

void List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return List_descriptor_;
}

const List& List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

List* List::default_instance_ = NULL;

List* List::New() const {
  return new List;
}

void List::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.List)
  return false;
#undef DO_
}

void List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.List)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.List)
}

::google::protobuf::uint8* List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.List)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.List)
  return target;
}

int List::ByteSize() const {
  int total_size = 0;

  // repeated bytes items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void List::MergeFrom(const List& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void List::CopyFrom(const List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {

  return true;
}

void List::Swap(List* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = List_descriptor_;
  metadata.reflection = List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dictionary::kEntriesFieldNumber;
#endif  // !_MSC_VER

Dictionary::Dictionary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Dictionary)
}

void Dictionary::InitAsDefaultInstance() {
}

Dictionary::Dictionary(const Dictionary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Dictionary)
}

void Dictionary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dictionary::~Dictionary() {
  // @@protoc_insertion_point(destructor:KRPC.Dictionary)
  SharedDtor();
}

void Dictionary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dictionary_descriptor_;
}

const Dictionary& Dictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Dictionary* Dictionary::default_instance_ = NULL;

Dictionary* Dictionary::New() const {
  return new Dictionary;
}

void Dictionary::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Dictionary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KRPC.DictionaryEntry entries = 1;
      case 1: {
        if (tag == 10) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Dictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Dictionary)
  return false;
#undef DO_
}

void Dictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Dictionary)
  // repeated .KRPC.DictionaryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Dictionary)
}

::google::protobuf::uint8* Dictionary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Dictionary)
  // repeated .KRPC.DictionaryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Dictionary)
  return target;
}

int Dictionary::ByteSize() const {
  int total_size = 0;

  // repeated .KRPC.DictionaryEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dictionary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dictionary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dictionary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dictionary::MergeFrom(const Dictionary& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dictionary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dictionary::CopyFrom(const Dictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dictionary::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void Dictionary::Swap(Dictionary* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dictionary_descriptor_;
  metadata.reflection = Dictionary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DictionaryEntry::kKeyFieldNumber;
const int DictionaryEntry::kValueFieldNumber;
#endif  // !_MSC_VER

DictionaryEntry::DictionaryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.DictionaryEntry)
}

void DictionaryEntry::InitAsDefaultInstance() {
}

DictionaryEntry::DictionaryEntry(const DictionaryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.DictionaryEntry)
}

void DictionaryEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DictionaryEntry::~DictionaryEntry() {
  // @@protoc_insertion_point(destructor:KRPC.DictionaryEntry)
  SharedDtor();
}

void DictionaryEntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void DictionaryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryEntry_descriptor_;
}

const DictionaryEntry& DictionaryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

DictionaryEntry* DictionaryEntry::default_instance_ = NULL;

DictionaryEntry* DictionaryEntry::New() const {
  return new DictionaryEntry;
}

void DictionaryEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DictionaryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.DictionaryEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.DictionaryEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.DictionaryEntry)
  return false;
#undef DO_
}

void DictionaryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.DictionaryEntry)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.DictionaryEntry)
}

::google::protobuf::uint8* DictionaryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.DictionaryEntry)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.DictionaryEntry)
  return target;
}

int DictionaryEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DictionaryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DictionaryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DictionaryEntry::MergeFrom(const DictionaryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DictionaryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryEntry::CopyFrom(const DictionaryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DictionaryEntry::Swap(DictionaryEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DictionaryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryEntry_descriptor_;
  metadata.reflection = DictionaryEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Set::kItemsFieldNumber;
#endif  // !_MSC_VER

Set::Set()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Set)
}

void Set::InitAsDefaultInstance() {
}

Set::Set(const Set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Set)
}

void Set::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Set::~Set() {
  // @@protoc_insertion_point(destructor:KRPC.Set)
  SharedDtor();
}

void Set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Set_descriptor_;
}

const Set& Set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Set* Set::default_instance_ = NULL;

Set* Set::New() const {
  return new Set;
}

void Set::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Set)
  return false;
#undef DO_
}

void Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Set)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Set)
}

::google::protobuf::uint8* Set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Set)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Set)
  return target;
}

int Set::ByteSize() const {
  int total_size = 0;

  // repeated bytes items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Set::MergeFrom(const Set& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Set::CopyFrom(const Set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Set::IsInitialized() const {

  return true;
}

void Set::Swap(Set* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Set_descriptor_;
  metadata.reflection = Set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tuple::kItemsFieldNumber;
#endif  // !_MSC_VER

Tuple::Tuple()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Tuple)
}

void Tuple::InitAsDefaultInstance() {
}

Tuple::Tuple(const Tuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Tuple)
}

void Tuple::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:KRPC.Tuple)
  SharedDtor();
}

void Tuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuple_descriptor_;
}

const Tuple& Tuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Tuple* Tuple::default_instance_ = NULL;

Tuple* Tuple::New() const {
  return new Tuple;
}

void Tuple::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Tuple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Tuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Tuple)
  return false;
#undef DO_
}

void Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Tuple)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Tuple)
}

::google::protobuf::uint8* Tuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Tuple)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Tuple)
  return target;
}

int Tuple::ByteSize() const {
  int total_size = 0;

  // repeated bytes items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {

  return true;
}

void Tuple::Swap(Tuple* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tuple_descriptor_;
  metadata.reflection = Tuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Status::kVersionFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KRPC.Status)
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KRPC.Status)
}

void Status::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:KRPC.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (has_version()) {
    if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      version_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KRPC.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KRPC.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KRPC.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KRPC.Status)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KRPC.Status)
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KRPC.Status)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KRPC.Status)
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KRPC

// @@protoc_insertion_point(global_scope)
